import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = '7340903364:AAET-jHiIsLGmdyz_UAEfFGmpwbzWNqRt7I'

# –•—Ä–∞–Ω–∏–º –∏–≥—Ä—ã –ø–æ chat_id
games = {}

def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

def board_to_markup(board):
    markup = []
    for i in range(3):
        row = []
        for j in range(3):
            cell = board[i][j]
            text = cell if cell != ' ' else ' '
            row.append(InlineKeyboardButton(text, callback_data=f'{i},{j}'))
        markup.append(row)
    return InlineKeyboardMarkup(markup)

def check_winner(board):
    lines = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    for i in range(3):
        lines.append(board[i])  # —Å—Ç—Ä–æ–∫–∞
        lines.append([board[0][i], board[1][i], board[2][i]])  # —Å—Ç–æ–ª–±–µ—Ü

    # –î–∏–∞–≥–æ–Ω–∞–ª–∏
    lines.append([board[0][0], board[1][1], board[2][2]])
    lines.append([board[0][2], board[1][1], board[2][0]])

    for line in lines:
        if line[0] != ' ' and line.count(line[0]) == 3:
            return line[0]
    return None

def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

async def start(update: Update, context):
    chat_id = update.effective_chat.id
    games[chat_id] = {'board': create_board()}
    await update.message.reply_text(
        "Let's play Tic-Tac-Toe!\nYou are 'X'. Make your move.",
        reply_markup=board_to_markup(games[chat_id]['board'])
    )

async def button(update, context):
    query = update.callback_query
    chat_id = query.message.chat_id

    if chat_id not in games:
        await query.answer("Start a game with /start")
        return

    game = games[chat_id]
    board = game['board']

    i, j = map(int, query.data.split(','))
    if board[i][j] != ' ':
        await query.answer("Cell already taken!")
        return

    # –•–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    board[i][j] = 'X'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
    winner = check_winner(board)
    if winner:
        await query.edit_message_text(f"üéâ You win!", reply_markup=None)
        del games[chat_id]
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π
    if is_draw(board):
        await query.edit_message_text("It's a draw!", reply_markup=None)
        del games[chat_id]
        return

    # –•–æ–¥ –±–æ—Ç–∞
    empty_cells = [(x, y) for x in range(3) for y in range(3) if board[x][y] == ' ']
    if empty_cells:
        x, y = random.choice(empty_cells)
        board[x][y] = 'O'
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –±–æ—Ç–∞
        winner = check_winner(board)
        if winner:
            await query.edit_message_text(f"ü§ñ Bot wins!", reply_markup=None)
            del games[chat_id]
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π
        if is_draw(board):
            await query.edit_message_text("It's a draw!", reply_markup=None)
            del games[chat_id]
            return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
    await query.edit_message_text("Your turn!", reply_markup=board_to_markup(board))
    await query.answer()

async def help_command(update, context):
    await update.message.reply_text(
        "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥."
    )

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
